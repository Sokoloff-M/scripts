def gen1(num):
    print('generator start')
    while num < 10:
        yield num
        # сюда осуществляется возврат при следующем вызове функции next()
        # фукция-генератор продолжает работу до следующего оператора yield
        num += 1

rg = gen1(5)
print(type(rg), end='\n\n')

# первый вызов функции next() начинает выполнять тело 
#   функции-генератора, пока не встретится оператор yield
# функция next() возвращает результат вычисления выражения, 
#   являющегося операндом yield
print(next(rg))
# следующий вызов функции next() возвращается в функцию-генератор, 
#   продолжая выполнять тело функции, пока не встретится следующий 
#   оператор yield
print(next(rg))
print(next(rg))
print(next(rg))
print(next(rg))
# при завершении выполнения тела функции-генератора вызывается 
#   исключение StopIteration, дальнейший перебор значений невозможен
# print(next(rg))

# получим пустой список, т.к. функция-генератор завершила работу
print(list(rg))

# заново вызываем функцию-генератор для создания нового объекта генератора
print(list(gen1(8)))
